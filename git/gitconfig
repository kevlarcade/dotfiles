[branch]
    autoSetupMerge = true
    autoSetupRebase = always

[color]
    advice = true
    branch = true
    diff = true
    grep = true
    interactive = true
    pager = true
    push = true
    showBranch = true
    status = true
    transport = true
    ui = true

[color "decorate"]
    branch = 2 bold
    remoteBranch = 1 bold
    tag = 3 bold
    stash = 5 bold
    HEAD = 6 bold

[color "diff"]
    context = 15
    meta = 4 bold reverse
    frag = 3 bold reverse
    commit = 3 bold
    old = 9
    new = 10
    oldMoved = 8
    newMoved = 14
    whitespace = 1 reverse

[color "interactive"]
    prompt = 4 bold
    header = 15 bold
    help = 15
    error = 1

[color "push"]
    error = 1 bold

[color "status"]
    header = 15 bold
    added = 14 bold
    changed = 11 bold
    untracked = 9 bold
    branch = 15 bold
    nobranch = 9 bold reverse
    localBranch = 2 bold
    remoteBranch = 1 bold
    unmerged = 1 bold reverse

[color "transport"]
    rejected = 1 bold

[column]
    ui = auto,column

[commit]
    gpgSign = true
    status = true

[core]
    editor = nvim
    pager = less -S
    whitespace = fix,trailing-space,cr-at-eol
    hooksPath = ~/.config/git/hooks
    excludesfile = ~/.ignore
    commitGraph = true

[credential]
    helper = cache

[diff]
    tool = kitty
    guitool = kitty.gui

[difftool]
    prompt = false
    trustExitCode = true

[difftool "kitty"]
    cmd = kitty +kitten diff $LOCAL $REMOTE

[difftool "kitty.gui"]
    cmd = kitty kitty +kitten diff $LOCAL $REMOTE

[fetch]
    prune = true

[grep]
    lineNumber = true
    patternType = perl

[interactive]
    singlekey = true

[log]
    abbrevCommit = true
    decorate = short
    date = format:%a, %Y-%m-%d %R (%z)
    graphColors = 1,2,3,4,5,6,8,166,9,10,11,12,13,14,15,208
    showRoot = true
    mailmap = true

[pretty]
    lo = tformat:%C(auto)%h%C(reset)%C(auto)%d%C(reset) %s %C(italic blue)%ad%C(reset) %C(241)%aN%C(reset)
    lt = tformat:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n
    lf = tformat:%C(auto)%h%C(reset)%C(auto)%d%C(reset)%n%C(white)SHA-1:%C(reset)    %C(italic)%H%C(reset)%n%C(white)Author:%C(reset)   %aN %C(241)<%aE>%C(reset)%n          %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%n%C(white)Commit:%C(reset)   %cN %C(241)<%cE>%C(reset)%n          %C(italic blue)%cd%C(reset) %C(italic cyan)(%cr)%C(reset)%w(0,4,4)%n%+C(bold)%s%C(reset)%n%+b%n
    rlo = tformat:%C(auto)%h%C(reset) %C(bold yellow)(%C(red)%gd%C(bold yellow))%C(reset)%C(auto)%d%C(reset) %s %C(italic blue)%ad%C(reset) %C(241)%aN%C(reset)
    rlt = tformat:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n %C(white)⤷%C(reset) %C(bold yellow)(%C(red)%gd%C(bold yellow))%C(reset) %gs %C(241)- %gN <%gE>%C(reset)%n
    rlf = tformat:%C(auto)%h%C(reset)%C(auto)%d%C(reset)%n%C(white)SHA-1:%C(reset)    %C(italic)%H%C(reset)%n%C(white)Author:%C(reset)   %aN %C(241)<%aE>%C(reset)%n          %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%n%C(white)Commit:%C(reset)   %cN %C(241)<%cE>%C(reset)%n          %C(italic blue)%cd%C(reset) %C(italic cyan)(%cr)%C(reset)%n%C(white)Reflog:%C(reset)   %gN %C(241)<%gE>%C(reset)%n          %C(italic)%gs%C(reset)%w(0,4,4)%n%+C(bold)%s%C(reset)%n%+b%n

[protocol]
    version = 2

[pull]
    rebase = interactive

[push]
    default = simple
    gpgSign = if-asked
    followTags = true

[rebase]
    missingCommitsCheck = warn
    abbreviateCommands = false
    autoSquash = true
    stat = true

[rerere]
    enabled = true

[status]
    short = true
    branch = true
    showStash = true
    submoduleSummary = true

[submodule]
    fetchJobs = 0

[svn]
    rmdir = true

[url "aur@aur.archlinux.org"]
    insteadOf = @aur:

[url "git@bitbucket.org:"]
    insteadOf = @bb:

[url "git@github.com:"]
    insteadOf = @gh:

[url "git@gitlab.com:"]
    insteadOf = @gl:

[url "https://aur.archlinux.org/"]
    insteadOf = aur://

[url "https://bitbucket.org/"]
    insteadOf = bb://

[url "https://github.com/"]
    insteadOf = gh://

[url "https://gitlab.com/"]
    insteadOf = gl://

[user]
    email = brian@tiuxo.com
    name = Brian Clemens
    signingkey = DD4A5EB2594412B9

[web]
    browser = firefox

[alias]
    ec = config --global --edit

    # log, current branch
    l = log --pretty=lt --graph --color
    lo = log --pretty=lo --graph --color --date=short
    lf = log --pretty=lf --graph --color
    lff = log --pretty=fuller --graph --color --stat --summary
    lp = log --pretty=medium --patch --graph --color -c -M -C
    ld = log --format=medium --stat --summary --left-right

    # log, all branches+tags on all remotes
    #    added: --all
    la = log --pretty=lt --graph --color --all
    lao = log --pretty=lo --graph --color --date=short --all
    laf = log --pretty=lf --graph --color --all
    laff = log --pretty=fuller --graph --color --stat --summary --all
    lap = log --pretty=medium --patch --graph --color -c -M -C --all
    lad = log --format=medium --stat --summary --left-right --all

    # log, all branches+tags on remotes 'origin' and 'upstream'
    #    added: --branches='*' --tags='*' --remotes=origin --remotes=upstream
    lg = log --pretty=lt --graph --color --branches='*' --tags='*' --remotes=origin --remotes=upstream
    lgo = log --pretty=lo --graph --color --date=short --branches='*' --tags='*' --remotes=origin --remotes=upstream
    lgf = log --pretty=lf --graph --color --branches='*' --tags='*' --remotes=origin --remotes=upstream
    lgff = log --pretty=fuller --graph --color --stat --summary --branches='*' --tags='*' --remotes=origin --remotes=upstream
    lgp = log --pretty=medium --patch --graph --color -c -M -C --branches='*' --tags='*' --remotes=origin --remotes=upstream
    lgd = log --format=medium --stat --summary --left-right --branches='*' --tags='*' --remotes=origin --remotes=upstream

    # log, simplified by decoration
    #    added: --all --simplify-by-decoration
    ls = log --pretty=lt --graph --color --all --simplify-by-decoration
    lso = log --pretty=lo --graph --color --date=short --all --simplify-by-decoration
    lsf = log --pretty=lf --graph --color --all --simplify-by-decoration
    lsff = log --pretty=fuller --graph --color --stat --summary --all --simplify-by-decoration
    lsp = log --pretty=medium --patch --graph --color -c -M -C --all --simplify-by-decoration
    lsd = log --format=medium --stat --summary --left-right --all --simplify-by-decoration

    sh = show --format=lf --stat --summary --patch
    w = "!f() { watch -ctn 2 git \"${@:-l}\"; }; f"
    rl = reflog --pretty=rlt --color
    rlo = reflog --pretty=rlo --color
    rlf = reflog --pretty=rlf --color
    sl = stash list --pretty=rlt --color
    slo = stash list --pretty=rlo --color
    slf = stash list --pretty=rlf --color

    d = diff -c
    ds = diff --find-renames --stat -c
    dc = diff --cached -c
    dl = diff --cached -c HEAD~
    du = diff --cached -c @{u}
    dr = "!f() { git diff -c \"${1:-HEAD}\"~..\"${1:-HEAD}\"; }; f"
    grep = grep -Ii

    s = status
    si = status --ignored
    siu = status --ignored --untracked-files

    a = add
    au = add --update
    ai = add --interactive
    ap = add --patch
    u = reset HEAD --
    up = reset --patch HEAD --
    c = commit --verbose
    ca = commit --verbose --amend
    can = commit --verbose --amend --no-edit
    car = commit --verbose --amend -a

    co = checkout
    com = checkout master
    cod = checkout develop
    cob = checkout -b
    b = branch
    bv = branch --all -vv
    bc = branch --contains
    bd = branch --delete --force

    cl = clone
    p = pull
    f = fetch --tags
    fa = fetch --all --tags
    pfa = "!f() { git remote | xargs -I@ -P0 git fetch --tags \"$@\" @; }; f"
    su = submodule update --init --recursive
    pu = push

    m = merge
    ma = merge --abort
    mc = merge --continue
    mff = merge --ff-only
    mnc = "!f() { git merge --no-commit --no-ff \"$@\"; EC=$?; git merge --abort; exit $EC; }; f"

    r = rebase
    ra = rebase --abort
    rc = rebase --continue
    rq = rebase --quit
    rs = rebase --skip
    ret = rebase --edit-todo
    rsh = rebase --show-current-patch

    ri = rebase --interactive
    riu = rebase --interactive @{u}
    rim = rebase --interactive master
    rid = rebase --interactive develop

    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue
    cpq = cherry-pick --quit

    rv = revert
    rva = revert --abort
    rvc = revert --continue
    rvq = revert --quit

    re = reset --mixed
    res = reset --soft
    reh = reset --hard
    cln = clean

    mt = mergetool
    dt = difftool

    which = branch --contains
    who = shortlog --summary --numbered --no-merges
    whoami = !"git config --get user.name && git config --get user.email"

    # list aliases
    alias = "!git config --get-regexp alias | cut -c 7- | sed -e \"s/^//\" -e \"s/ /$(echo 2B | xxd -r -p)/\" | column -t -s \"$(echo 2B | xxd -r -p)\" | sort | less -SR "

    # list branches sorted by last modified
    bls = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's@refs/heads/@@'"

    # initialize repository in current directory
    this = "!git init && git commit --message='Initialize' --allow-empty"

    # regex checkout
    #    git rco <regex> [<options>]
    rco = "!f() { REGEX=$1; shift; git checkout \"$@\" \"$(git branch --all | cut -c 3- | sed 's|^remotes/.*/||' | grep -m 1 -iEe \"$REGEX\" )\"; }; f"

    # open Github repository in browser
    #    git open [<remote>]
    open = "!f() { URL=$(git config remote.\"${1:-origin}\".url); xdg-open \"${URL%%.git}\"; }; f"

    # fetch and checkout a Github pull request
    #    git pr [[<remote>] <number>]
    pr = "!f() { git config remote.upstream.url > /dev/null 2>&1 && REMOTE=upstream || REMOTE=origin; [ \"$#\" -gt 1 ] && REMOTE=\"$1\" && shift; git fetch \"${REMOTE:-origin}\" \"pull/$1/head\" && git checkout FETCH_HEAD; }; f"

    # hard reset with commit before (use reflog to recover)
    #    git wipe [<commit>]
    wipe = "!f() { git add --all && git commit --quiet --message='WIPE-SAVEPOINT' && git reset \"${1:-HEAD~}\" --hard && git clean -fd; }; f"

    # hard reset and clean (unrecoverable)
    nuke = !"git reset --hard HEAD && git clean -fd"

    # set up remotes for fork
    #    git fork [<old-remote> [<new-remote>]]
    fork = "!f() { URL=$(git config remote.\"${1:-origin}\".url); git remote set-url \"${1:-origin}\" \"$(echo \"$URL\" | perl -pe 's/(?<=[:\\/])[^:\\/]+(?=\\/[^\\/]+$)/alfunx/')\"; git remote add \"${2:-upstream}\" \"$URL\"; }; f"

    # get gitignore from github/gitignore.git
    #    git gitignore <type>
    gitignore = "!f() { curl -sf \"https://raw.githubusercontent.com/github/gitignore/master/$1.gitignore\" -o \"$1.gitignore\"; }; f"

    # generate tags file
    ctags = "!$HOME/.config/git/hooks/ctags"

    # fzf commands
    fbr = fzf-branch
    fco = fzf-checkout
    fcoc = fzf-checkout-commit
    fsha = fzf-print-sha
    fshow = fzf-show-commit
    fstash = fzf-show-stash
