# {{{ ALIASES

#   {{{ FILE MANAGEMENT
alias .='cd ../'                # up a directory
alias ..='cd ../../'            # up two directories
alias ...='cd ../../../'       # up three directories
alias cp='cp -iv'               # interactive and verbose cp
alias l='ls -l -a'              # list all files
alias ll='ls -l'                # list files
alias mkdir='mkdir -p'          # do not clobber files when making paths
alias mv='mv -iv'               # interactive and verbose mv
alias rm='rm -iv'               # interactive and verbose rm

function ls {
    command ls -F -h --color=always -v --time-style=long-iso -C "$@" | less -R -X -F
}

function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       7z x $1         ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
#   }}}

#   {{{ SHELL MANAGEMENT
alias :q='exit'                                     # quit shell
alias j='jobs -l'                                   # list jobs
alias path='echo -e ${PATH//:/\\n}'                 # show executable paths
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'   # show library paths
alias testpowerline='echo "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"'
#   }}}

#   {{{ WEB SERVICES
0x0() { curl -F"file=@$1" https://0x0.st; }             # temporary upload
cheatsheet() { curl cheat.sh/$1; }                      # command cheatsheet
qrcode() { echo $@ | curl -F-=\<- qrenco.de; }          # print qrcode
alias porn=' mpv "http://www.pornhub.com/random"'       # ayy lmao
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias weather='curl -s wttr.in/~白井市 | head -7'       # print weather
alias weatherforecast='curl -s wttr.in/~白井市 | head -37 | tail -30'
#   }}}

alias ap='sudo create_ap --config ~/.config/create_ap.conf' # spawn wifi spot
alias axel='axel -a -n 2 -T 10 -U "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36" -v'
alias bm='bmon -p wlp0s29u1u2,wlp0s29u1u1,wlp2s0,ap0 -o "curses:fgchar=S;bgchar=.;nchar=N;uchar=?;details"'
alias d='kitty +kitten diff'                            # fast diff
alias dc='docker-compose'                               # docker
alias feh='feh --scale-down'                            # feh fit photo
alias kal='khal interactive'                            # calendar
alias ic='kitty +kitten icat --align left'              # image cat
alias ip='ip -c'                                        # colorize ip
alias gc='git commit -am'                               # git commit with message
alias gl='git log --graph --oneline --decorate --all'   # graph git log
alias gs='git status -sb'                               # simplify git status
alias grep='grep --color=auto'                          # colorize grep
alias mutt='neomutt'                                    # neomutt
# alias ncmpcpp='ncmpcpp --screen visualizer --slave-screen media_library'
alias pactree='pactree --color'         # colorize pactree
alias ping='ping -c 4'                  # don't ping forever
alias tree='tree -C'                    # colorize tree
alias vi='nvim'; alias vim='nvim'       # use nvim where vi or vim is called
alias vd='nvim -d'                      # use nvim when diffing
alias zeph='Xephyr :5 & sleep 1 ; DISPLAY=:5 awesome'   # xephyr window

# }}}

# {{{ ZSH OPTIONS

bindkey -v  # VIM mode

# history
HISTFILE=~/.local/histfile      # location of command history file
HISTSIZE=4000                   # hist file max lines
SAVEHIST=4000                   # max amount of history to keep
setopt HIST_IGNORE_DUPS         # disabled for smart autocompletion
# }}}

# {{{ PLUGINS

# fzf
source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

# autosuggestions
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=241"    # use dark gray for suggestions
ZSH_AUTOSUGGEST_STRATEGY="match_prev_cmd"   # contextual suggestions
ZSH_AUTOSUGGEST_USE_ASYNC=1                 # asynchronous fetching

# syntax highlighting
source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh

# }}}

# {{{ COMPLETION

autoload -Uz compinit

# throttle compinit to once an hour
re_initialize=0
for match in ${HOME}/.zcompdump*(.Nmh+1); do
  re_initialize=1
  break
done
if [ "$re_initialize" -eq "1" ]; then
  compinit
  compdump
else
  compinit -C
fi

setopt COMPLETE_ALIASES                 # autocomplete aliases
zstyle ':completion:*' menu select      # easy menu

# fuzzy completion
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:[[:ascii:]]||[[:ascii:]]=** r:|=* m:{a-z\-}={A-Z\_}'
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*' format $'\n%F{green}%d%f'
zstyle ':completion:*' group-name ''

# }}}

# {{{ PROMPT

autoload -Uz promptinit && promptinit
prompt elite
function parse_git_dirty {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}
function parse_current_dir {
    ruby -e "puts ('../'+Dir.getwd.split('/').last(2).join('/')).gsub('//', '/')"
}

CURRENT_BG='NONE'
SEGMENT_SEPARATOR=''

prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

# Prompt components

# context: user@hostname (who am I and where am I)
prompt_context() {
  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    prompt_segment 246 235 "%(!.%{%F{yellow}%}.)$USER@%m"
  fi
}

# git: branch/detached head, dirty status
prompt_git() {
  local ref dirty mode repo_path
  repo_path=$(git rev-parse --git-dir 2>/dev/null)

  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"
    if [[ -n $dirty ]]; then
      prompt_segment 172 black
    else
      prompt_segment green black
    fi

    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
      mode=" <B>"
    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
      mode=" >M<"
    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
      mode=" >R>"
    fi

    setopt promptsubst
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' get-revision true
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr '✚'
    zstyle ':vcs_info:git:*' unstagedstr '●'
    zstyle ':vcs_info:*' formats ' %u%c'
    zstyle ':vcs_info:*' actionformats ' %u%c'
    vcs_info
    echo -n "${ref/refs\/heads\// }${vcs_info_msg_0_%% }${mode}"
  fi
}

# dir: current working directory
prompt_dir() {
  prompt_segment 239 248 '%(3~|…/%2~|%~)'   # display two levels of context
}

# virtualenv: current working virtualenv
prompt_virtualenv() {
  local virtualenv_path="$VIRTUAL_ENV"
  if [[ -n $virtualenv_path && -n $VIRTUAL_ENV_DISABLE_PROMPT ]]; then
    prompt_segment blue black "(`basename $virtualenv_path`)"
  fi
}

# status: other misc status
prompt_status() {
  local symbols
  symbols=()
  [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}✘"                # was there an error
  [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}⚡"               # am I root
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}⚙"    # are there background jobs

  [[ -n "$symbols" ]] && prompt_segment black default "$symbols"
}

## Main prompt
build_prompt() {
  RETVAL=$?
  prompt_status
  prompt_virtualenv
  prompt_context
  prompt_dir
  prompt_git
  prompt_end
}

PROMPT='%{%f%b%k%}$(build_prompt) '

# }}}
